generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(uuid())
  fullName                 String    @db.VarChar(100)
  email                    String    @unique @db.VarChar(100)
  password                 String
  role                     String    @default("student") // student, instructor, admin, super_admin
  isEmailVerified          Boolean   @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  lastLogin                DateTime?
  isActive                 Boolean   @default(true)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relations
  createdCourses     Course[]            @relation("CourseCreator")
  managedCourses     Course[]            @relation("CourseManager")
  instructorCourses  CourseInstructor[]
  enrollments        Enrollment[]
  chapterProgress    ChapterProgress[]
  courseReviews      CourseReview[]
  assessmentAttempts AssessmentAttempt[]

  @@map("users")
}

model Course {
  id        String  @id @default(uuid())
  title     String
  thumbnail String? // course image
  status    String  @default("draft") // "draft" | "published" | "archived"

  // Creator: SA/Admin always allowed; Instructor only if app-permission allows
  creatorId String
  creator   User   @relation("CourseCreator", fields: [creatorId], references: [id])

  // Optional single manager (Admin or Super Admin). Enforce role in API.
  managerId String?
  manager   User?   @relation("CourseManager", fields: [managerId], references: [id])

  // Teaching & enrollment
  instructors CourseInstructor[]
  enrollments Enrollment[]

  // Content & assessments
  chapters    Chapter[]
  assessments Assessment[] // includes the final course test (scope = "course")
  reviews     CourseReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([creatorId])
  @@index([managerId])
  @@index([status])
}

model CourseInstructor {
  id           String @id @default(uuid())
  courseId     String
  instructorId String

  course     Course @relation(fields: [courseId], references: [id])
  instructor User   @relation(fields: [instructorId], references: [id])

  @@unique([courseId, instructorId])
  @@index([instructorId])
}

model Enrollment {
  id        String @id @default(uuid())
  courseId  String
  studentId String
  status    String @default("active") // "active" | "completed" | "dropped"
  progress  Int    @default(0) // 0–100

  course  Course @relation(fields: [courseId], references: [id])
  student User   @relation(fields: [studentId], references: [id])

  @@unique([courseId, studentId])
  @@index([studentId])
}

model Chapter {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(200)
  slug        String   @db.VarChar(250)
  description String?  @db.Text
  content     String?  @db.Text
  attachments String[]
  order       Int
  isPreview   Boolean  @default(false)
  isPublished Boolean  @default(true)
  courseId    String
  settings    Json     @default("{\"allowComments\": true, \"allowNotes\": true, \"allowDownloads\": true}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    ChapterProgress[]
  assessments Assessment[]

  @@unique([courseId, slug])
  @@index([courseId])
  @@index([order])
  @@map("chapters")
}

model ChapterProgress {
  id          String    @id @default(uuid())
  isCompleted Boolean   @default(false)
  timeSpent   Int       @default(0) // seconds
  completedAt DateTime?
  chapterId   String
  studentId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  student User    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([chapterId, studentId])
  @@index([chapterId])
  @@index([studentId])
  @@map("chapter_progress")
}

model Assessment {
  id               String  @id @default(uuid())
  title            String
  type             String  @default("quiz") // "quiz" | "test"
  scope            String  @default("chapter") // "chapter" | "course"
  timeLimitSeconds Int?
  maxAttempts      Int     @default(1)
  isPublished      Boolean @default(true)
  order            Int? // useful for chapter quizzes

  // Scope relations (one of these set depending on scope)
  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  // Structure & results
  questions AssessmentQuestion[]
  attempts  AssessmentAttempt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@index([chapterId])
  @@index([type])
  @@index([scope])
  @@map("assessments")
}

model AssessmentQuestion {
  id                 String   @id @default(uuid())
  assessmentId       String
  prompt             String
  type               String   @db.VarChar(30) // e.g. "MCQ" | "TRUE_FALSE" | ...
  options            String[] // Postgres text[]
  correctOptionIndex Int? // <— ADD THIS (single-answer MCQ/TF)
  // correctOptionIndexes Int[] @default([])     // <— (optional) multi-select support
  points             Int      @default(1)
  order              Int      @default(1)

  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
}

model AssessmentAttempt {
  id           String    @id @default(uuid())
  assessmentId String
  studentId    String
  startedAt    DateTime  @default(now())
  submittedAt  DateTime?
  status       String    @default("in_progress") // "in_progress" | "submitted" | "graded"
  score        Int?
  maxScore     Int?
  answers      Json? // e.g. [{ "questionId":"...", "optionIds":["..."] }] or text

  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
  @@index([studentId])
  @@map("assessment_attempts")
}

model CourseReview {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?  @db.Text
  isPublic  Boolean  @default(true)
  courseId  String
  studentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId])
  @@index([courseId])
  @@index([studentId])
  @@index([rating])
  @@map("course_reviews")
}
